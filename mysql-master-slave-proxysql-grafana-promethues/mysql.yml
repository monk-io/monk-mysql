namespace: monk-mysql-proxysql-monitor

mysql-common:
  connections:
    master:
      runnable: monk-mysql-proxysql-monitor/master
      service: mysql-svc
    slave1:
      runnable: monk-mysql-proxysql-monitor/slave1
      service: mysql-svc
    slave2:
      runnable: monk-mysql-proxysql-monitor/slave2
      service: mysql-svc

  variables:
    image_tag:
      type: string
      value: <- $mysql_image_tag
    database_name:
      type: string
      env: MYSQL_DATABASE
      value: <- $mysql_database_name
    database_user:
      env: MYSQL_USER
      type: string
      value: <- $mysql_database_user
    database_password:
      env: MYSQL_PASSWORD
      type: string
      value: <- $mysql_database_password
    database_root_password:
      env: MYSQL_ROOT_PASSWORD
      value: <- $mysql_database_root_password
      type: string
    database_master_host:
      env: MYSQL_MASTER_HOST
      type: string
      value: <- connection-hostname("master") split(".dns.podman") join("")
    database_slave1_host:
      env: MYSQL_SLAVE1_HOST
      type: string
      value: <- connection-hostname("slave1") split(".dns.podman") join("")
    mysql-slave2-host:
      env: MYSQL_SLAVE2_HOST
      type: string
      value: <- connection-hostname("slave2") split(".dns.podman") join("")
    volume_data:
      type: string
      value: <- `${monk-volume-path}`

  services:
    mysql-svc:
      port: 3306
      container: mysql
      protocol: tcp

master:
  metadata:
    private: true
  defines: runnable
  inherits: monk-mysql-proxysql-monitor/mysql-common

  variables:
    mysql_port:
      type: int
      value: <- $mysql_master_database_port

  containers:
    mysql:
      paths:
        - <- `${volume_data}/mysql-master:/var/lib/mysql`
      ports:
        - <- `${mysql_port}:3306`
      image-tag: <- `${image_tag}`
      image: mysql

  files:
    my-file:
      raw: true
      contents: |
        [mysqld]
        server-id=1
        log-bin=mysql-bin
        log-slave-updates=1
        datadir=/var/lib/mysql/
        innodb_flush_log_at_trx_commit = 2
        innodb_flush_method = O_DIRECT
        skip-host-cache
        skip-name-resolve
        default-authentication-plugin=mysql_native_password
      container: mysql
      path: /etc/mysql/conf.d/master.cnf
      mode: 644

slave1:
  metadata:
    private: true
  defines: runnable
  inherits: monk-mysql-proxysql-monitor/mysql-common

  variables:
    mysql_port:
      type: int
      value: <- $mysql_slave1_database_port
    slave1-volume_data:
        type: string
        value: <- $volume_data

  containers:
    mysql:
      ports:
        - <- `0.0.0.0:${mysql_slave1_database_port}:3306`
      image-tag: <- `${image_tag}`
      paths:
        - <- `${slave1-volume_data}/mysql-slave1:/var/lib/mysql`
      image: mysql

  files:
    my-file:
      raw: true
      contents: |
        [mysqld]
        server-id=2
        log-bin=mysql-bin
        log-slave-updates=1
        auto_increment_increment=2
        auto_increment_offset=2
        datadir=/var/lib/mysql
        read-only=1
        slave-skip-errors = 1062
        skip-host-cache
        skip-name-resolve
        default-authentication-plugin=mysql_native_password
      container: mysql
      path: /etc/mysql/conf.d/slave1.cnf
      mode: 644

slave2:
  metadata:
    private: true
  defines: runnable
  inherits: monk-mysql-proxysql-monitor/mysql-common

  variables:
    mysql_port:
      type: int
      value: <- $mysql_slave2_database_port
    slave2-volume_data:
        type: string
        value: <- $volume_data

  containers:
    mysql:
      ports:
        - <- `0.0.0.0:${mysql_slave2_database_port}:3306`
      image-tag: <- `${image_tag}`
      paths:
        - <- `${slave2-volume_data}/mysql-slave2:/var/lib/mysql`
      image: mysql

  files:
    my-file:
      raw: true
      contents: |
        [mysqld]
        server-id=3
        log-bin=mysql-bin
        log-slave-updates=1
        auto_increment_increment=2
        auto_increment_offset=2
        datadir=/var/lib/mysql
        read-only=1
        slave-skip-errors = 1062
        skip-host-cache
        skip-name-resolve
        default-authentication-plugin=mysql_native_password
      container: mysql
      path: /etc/mysql/conf.d/slave2.cnf
      mode: 644

configure:
  metadata:
    private: true
  defines: runnable
  inherits: monk-mysql-proxysql-monitor/mysql-common

  variables:
    mysql_master_password:
      env: MYSQL_MASTER_PASSWORD
      type: string
      value: <- $mysql_database_root_password
    mysql_repl_user:
      env: MYSQL_REPLICATION_USER
      type: string
      value: <- $mysql_database_repl_user
    mysql_repl_password:
      env: MYSQL_REPLICATION_PASSWORD
      value: <- $mysql_database_repl_password
      type: string
    database_monitor_password:
      env: MYSQL_MONITOR_PASSWORD
      value: <- $mysql_database_monitor_password
      type: string
    database_monitor_user:
      env: MYSQL_MONITOR_USER
      value: <- $mysql_database_monitor_user
      type: string

  containers:
    mysql:
      bash: /tmp/init.sh
      image-tag: <- `${image_tag}`
      image: mysql

  files:
    my-file:
      raw: true
      contents: |
        #!/bin/sh
        sleep 20
        while ! mysqladmin ping -u root -h $MYSQL_MASTER_HOST -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST --silent; do
          sleep 1
        done

        mysql -u root -h $MYSQL_MASTER_HOST -p$MYSQL_ROOT_PASSWORD  -e "RESET MASTER;"
        mysql -u root -h $MYSQL_MASTER_HOST -p$MYSQL_ROOT_PASSWORD  -e "FLUSH TABLES WITH READ LOCK;"

        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "UNLOCK TABLES;"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "CREATE USER '$MYSQL_MONITOR_USER'@'%' IDENTIFIED BY '$MYSQL_MONITOR_PASSWORD';"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "FLUSH PRIVILEGES;"

        mysqldump -uroot -h $MYSQL_MASTER_HOST  -p$MYSQL_ROOT_PASSWORD --all-databases --source-data --single-transaction --flush-logs --events --result-file=/tmp/master_dump.sql

        mysql -h $MYSQL_SLAVE1_HOST -u root -p$MYSQL_ROOT_PASSWORD -e "STOP SLAVE;";
        mysql -h $MYSQL_SLAVE1_HOST -u root -p$MYSQL_ROOT_PASSWORD < /tmp/master_dump.sql
        mysql -h $MYSQL_SLAVE1_HOST -u root -p$MYSQL_ROOT_PASSWORD -e "FLUSH PRIVILEGES;";

        mysql -h $MYSQL_SLAVE2_HOST -u root -p$MYSQL_ROOT_PASSWORD -e "STOP SLAVE;";
        mysql -h $MYSQL_SLAVE2_HOST -u root -p$MYSQL_ROOT_PASSWORD < /tmp/master_dump.sql
        mysql -h $MYSQL_SLAVE2_HOST -u root -p$MYSQL_ROOT_PASSWORD -e "FLUSH PRIVILEGES;";

        log_file=`mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "SHOW MASTER STATUS\G" | grep File: | awk '{print $2}'`
        pos=`mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_MASTER_HOST -e "SHOW MASTER STATUS\G" | grep Position: | awk '{print $2}'`

        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE1_HOST -e "RESET SLAVE";
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE1_HOST -e "CHANGE MASTER TO MASTER_HOST='$MYSQL_MASTER_HOST', MASTER_USER='root', MASTER_PASSWORD='$MYSQL_ROOT_PASSWORD', MASTER_LOG_FILE='${log_file}', MASTER_LOG_POS=${pos};"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE1_HOST -e "start slave"

        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE2_HOST -e "RESET SLAVE";
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE2_HOST -e "CHANGE MASTER TO MASTER_HOST='$MYSQL_MASTER_HOST', MASTER_USER='root', MASTER_PASSWORD='$MYSQL_ROOT_PASSWORD', MASTER_LOG_FILE='${log_file}', MASTER_LOG_POS=${pos};"
        mysql -u root -p$MYSQL_ROOT_PASSWORD -h $MYSQL_SLAVE2_HOST -e "start slave"

      container: mysql
      path: /tmp/init.sh
      mode: 755

  depends:
    wait-for:
      runnables:
        - monk-mysql-proxysql-monitor/master
        - monk-mysql-proxysql-monitor/slave1
        - monk-mysql-proxysql-monitor/slave2
      timeout: 60

lb:
  metadata:
    private: true
  defines: runnable

  connections:
    master:
      runnable: monk-mysql-proxysql-monitor/master
      service: mysql-svc
    slave1:
      runnable: monk-mysql-proxysql-monitor/slave1
      service: mysql-svc
    slave2:
      runnable: monk-mysql-proxysql-monitor/slave2
      service: mysql-svc

  variables:
    mysql-master-host:
      env: MYSQL_MASTER_HOST
      type: string
      value: <- connection-hostname("master") split(".dns.podman") join("")
    mysql-slave1-host:
      env: MYSQL_SLAVE1_HOST
      type: string
      value: <- connection-hostname("slave1") split(".dns.podman") join("")
    mysql-slave2-host:
      env: MYSQL_SLAVE2_HOST
      type: string
      value: <- connection-hostname("slave2") split(".dns.podman") join("")
    mpassword:
      env: MYSQL_ROOT_PASSWORD
      type: string
      value: <- $mysql_database_root_password
    monitor_user_password:
      env: MYSQL_MONITOR_PASSWORD
      value: <- $mysql_database_monitor_password
      type: string
    monitor_user:
      env: MYSQL_MONITOR_USER
      value: <- $mysql_database_monitor_user
      type: string
    proxysql_data:
      type: string
      value: proxysql-data

  containers:
    monk-proxysql:
      ports:
        - <- `6032:6032`
        - <- `6033:6033`
        - <- `6080:6080`
      image: severalnines/proxysql

  files:
    my-file:
      contents: |
        datadir="/var/lib/proxysql"
        admin_variables=
        {
          admin_credentials="{{ v "proxysql_admin_username"}}:{{ v "proxysql_admin_password"}}"
          stats_credentials="{{ v "proxysql_admin_username"}}:{{ v "proxysql_admin_password"}}"
          mysql_ifaces="0.0.0.0:6032"
          refresh_interval=2000
          admin-hash_passwords=false
          web_enabled=true
          web_port=6080
        }

        mysql_variables=
        {
          threads=4
          max_connections=2048
          default_query_delay=0
          default_query_timeout=36000000
          have_compress=true
          poll_timeout=2000
          interfaces="0.0.0.0:6033;/tmp/proxysql.sock"
          default_schema="information_schema"
          stacksize=1048576
          server_version="5.1.30"
          connect_timeout_server=10000
          monitor_history=60000
          monitor_connect_interval=200000
          monitor_ping_interval=200000
          ping_interval_server_msec=10000
          ping_timeout_server=200
          commands_stats=true
          sessions_sort=true
          monitor_username="{{ v "monitor_user" }}"
          monitor_password="{{ v "monitor_user_password" }}"
          set_query_lock_on_hostgroup=0
        }

        mysql_replication_hostgroups =
        (
          {
            writer_hostgroup=0
            reader_hostgroup=1
            comment="host groups"
          }
        )

        mysql_servers =
        (
          { address="{{ v "mysql-master-host"}}", port=3306, hostgroup=0, max_connections=1000, max_replication_lag = 5 },
          { address="{{ v "mysql-slave1-host"}}", port=3306, hostgroup=1, max_connections=1000, max_replication_lag = 5 },
          { address="{{ v "mysql-slave2-host"}}", port=3306, hostgroup=1, max_connections=1000, max_replication_lag = 5 }
        )

        mysql_users =
        (
          { username = "root", password = "{{ v "mpassword" }}",   default_hostgroup = 0, max_connections=1000, active = 1 }
        )

        mysql_query_rules =
        (
          {
            rule_id=1
            active=1
            match_pattern="^SELECT .* FOR UPDATE"
            destination_hostgroup=0
            apply=1
          },
          {
            rule_id=2
            active=1
            match_pattern="^SELECT .*"
            destination_hostgroup=1
            apply=1
          },
          {
            rule_id=3
            active=1
            match_pattern=".*"
            destination_hostgroup=0
            apply=1
          }
        )
      container: monk-proxysql
      path: /etc/proxysql.cnf
      mode: 644

  services:
    mysql-lb-svc:
      port: 3305
      container: monk-proxysql
      protocol: tcp

promethues-mysql-master-exporter:
  metadata:
    private: true
  defines: runnable

  connections:
    master:
      runnable: monk-mysql-proxysql-monitor/master
      service: mysql-svc

  variables:
    database_name:
      type: string
      env: MYSQL_DATABASE
      value: <- $mysql_database_name
    mysql-master-host:
      env: MYSQL_MASTER_HOST
      type: string
      value: <- connection-hostname("master") split(".dns.podman") join("")
    mysql_master_data_source:
      type: string
      env: DATA_SOURCE_NAME
      value: <- `root:${mysql_database_root_password}@(${mysql-master-host}:3306)/${mysql_database_name}`

  containers:
    mysql-master-prom-exporter:
      image: prom/mysqld-exporter

  services:
    mysql-master-exporter-svc:
      port: 9104
      container: mysql-master-prom-exporter
      protocol: tcp

promethues-mysql-slave1-exporter:
  defines: runnable

  connections:
    slave1:
      runnable: monk-mysql-proxysql-monitor/slave1
      service: mysql-svc

  variables:
    database_name:
      type: string
      env: MYSQL_DATABASE
      value: <- $mysql_database_name
    mysql-slave-host:
      env: MYSQL_SLAVE_HOST
      type: string
      value:  <- connection-hostname("slave1") split(".dns.podman") join("")
    mysql_master_data_source:
      type: string
      env: DATA_SOURCE_NAME
      value: <- `root:${mysql_database_root_password}@(${mysql-slave-host}:3306)/${mysql_database_name}`

  containers:
    mysql-slave-prom-exporter:
      image: prom/mysqld-exporter

  services:
    mysql-slave-exporter-svc:
      port: 9104
      container: mysql-slave-prom-exporter
      protocol: tcp

promethues-mysql-slave2-exporter:
  metadata:
    private: true
  defines: runnable

  connections:
    slave2:
      runnable: monk-mysql-proxysql-monitor/slave2
      service: mysql-svc

  variables:
    database_name:
      type: string
      env: MYSQL_DATABASE
      value: <- $mysql_database_name
    mysql-slave-host:
      env: MYSQL_SLAVE_HOST
      type: string
      value: <- connection-hostname("slave2") split(".dns.podman") join("")
    mysql_master_data_source:
      type: string
      env: DATA_SOURCE_NAME
      value: <- `root:${mysql_database_root_password}@(${mysql-slave-host}:3306)/${mysql_database_name}`

  containers:
    mysql-slave-prom-exporter:
      image: prom/mysqld-exporter

  services:
    mysql-slave-exporter-svc:
      port: 9104
      container: mysql-slave-prom-exporter
      protocol: tcp

promethues:
  metadata:
    private: true
  defines: runnable

  connections:
    master:
      runnable: monk-mysql-proxysql-monitor/promethues-mysql-master-exporter
      service: mysql-master-exporter-svc
    slave1:
      runnable: monk-mysql-proxysql-monitor/promethues-mysql-slave1-exporter
      service:  mysql-slave-exporter-svc
    slave2:
      runnable: monk-mysql-proxysql-monitor/promethues-mysql-slave2-exporter
      service: mysql-slave-exporter-svc

  variables:
    mysql-exporter-master:
      type: string
      value: <- connection-hostname("master") split(".dns.podman") join("")
    mysql-exporter-slave1:
      type: string
      value: <- connection-hostname("slave1") split(".dns.podman") join("")
    mysql-exporter-slave2:
      type: string
      value: <- connection-hostname("slave2") split(".dns.podman") join("")

  containers:
    mysql-promethues:
      image: prom/prometheus
      ports:
        - 9090:9090

  services:
    promethues-svc:
      port: 9090
      container: mysql-promethues
      protocol: tcp

  files:
    my-file:
      contents: |
        global:
          scrape_interval: 15s # By default, scrape targets every 15 seconds.

          # Attach these labels to any time series or alerts when communicating with
          # external systems (federation, remote storage, Alertmanager).
          external_labels:
            monitor: "codelab-monitor"

        # A scrape configuration containing exactly one endpoint to scrape:
        # Here it's Prometheus itself.
        scrape_configs:
          # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
          - job_name: "prometheus"

            # Override the global default and scrape targets from this job every 5 seconds.
            scrape_interval: 5s
            static_configs:
              - targets: [
                  "{{ v "mysql-exporter-master" }}:9104",
                  "{{ v "mysql-exporter-slave1" }}:9104",
                  "{{ v "mysql-exporter-slave2" }}:9104",
                ]
      container: mysql-promethues
      path: /etc/prometheus/prometheus.yml
      mode: 644

grafana:
  metadata:
    private: true
  defines: runnable
  containers:
    mysql-grafana:
      image: grafana/grafana
      ports:
        - 3000:3000
